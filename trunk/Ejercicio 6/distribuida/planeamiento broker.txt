Se crea Broker, que crea sus 4 servidores (1 emisor-receptor para el lado de los dispositivos, y otro emisor-receptor para los testers).
Tester Conoce Broker, se registra (se conecta, le manda primer mensaje de "che, me quiero registrar", el broker le debe responder algo como un "ok").
El broker se guarda (en una cola, por ejemplo, deberiamos encapsularlo para que, al cambiarlo (porque sera una shm) no joda) que el tester esta listo para actuar :D
Cuando viene un Dispositivo, lo primero que hace es conseguir su id (eso lo hace aparte, asi que no nos metemos con eso por ahora).
El dispositivo se conecta con el broker, y este, le manda su id para luego poder asignarle un tester con el requerimiento que mande (como mensaje propiamente dicho).
Si habian ya 100 dispositivos en el sistema, en vez de hacer eso, le manda su id, luego un mensaje de "a vos quien te conoce papa?", y mensaje de finalizacion de conexion. El cliente lo recibe, y tambien manda su mensaje de finalizacion de conexion.
Si había lugar, el receptor pone en la cola del broker, pero para que lo saque el emisor hacia los testers, que se lo manda. El tester contesta con programa, y el receptor vuelve a mandar, y así se hace el ida y vuelta hasta que se termine.
Si hay que seguir los testeos (con los especiales), se envia mensaje al broker (con el id especial para el broker), de "mandale los requerimientos a 'estos' testers especiales".
Sea como fuere que termina el tester, se vuelve a registrar, para indicar que puede seguir. (Habra que ver si un dispositivo sea cae, que no se pierda al tester, que eso no haría nada de gracia para los especiales).
Los testers especiales se manejan de la misma manera, a lo sumo habra que ver el tema de la memoria compartida.
Cuando el dispositivo termina de ser tratado, manda su mensaje de finalizacion de conexion; luego indica por RPC que devuelve su id.
Dado que el dispositivo puede ser atendido por varios testers, y en algunos casos, en orden "aleatorio" (no sabemos que tester especial va a tocar primero), y no sabemos a veces que id va a venir a responder, necesitamos que el cliente este todo el tiempo actualizando
el id para saber la respuesta-a-quien debo esperar en el emisor.
	
Importante: En el broker van a ver cola de ida y otra de vuelta (Una cola va desde el receptor del lado conectado al dispositivo, al emisor conectado al lado del servidor; y el otro alreves).
Ademas, el Broker va a tener un id especial, igual al de requerimientos (porque es el que debe leer el primer mensaje que llega, para poder saber a quien mandarselo). 
Hay un proceso que lee de la cola dispositivos->testers, esperando por nuevos requerimientos. Una vez que determina el tester, lo vuelve a poner en la cola (ver que eso no puede generar un deadlock) con el mtype = tester actualizado.
Hay un proceso que lee de la cola testers->dispositivos, para saber que se tienen que hay un testeo especial para hacer, con los testers ya determinados -> pone en la cola dispositivos->testers un mensaje de requerimiento hacia esos testers.
	
OJO: como ahora se unificaron las colas, es necesario que el tester (comun y especial) esperen en la cola la llegada del mensaje del tipo que esperan. Otra forma, es que el broker se quede parado hasta que el tester no esté disponible (en el caso de los comunes, cualquiera, y en el caso de los especiales, se forkea y mandan mensajes a medida que van apareciendo los testers, con un semaforo... seria una onda de rendesvoux).
